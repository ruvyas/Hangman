name: Dev Complete Workflow

# This will allow the workflow to be triggered manually
on:
  workflow_dispatch:
    inputs:
      next_release_version:
        description: 'Optional version to use for the release'
        required: false
        default: ''

jobs:
  create-release:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: main # Checkout the 'main' branch

    # Step 2: Read the VERSION file to get the current version
    - name: Get current version
      id: get_version
      run: |
        VERSION=$(cat VERSION)
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    # Step 3: Create a release branch based on the VERSION
    - name: Create release branch
      run: |
        git config --global push.autoSetupRemote true
        git config --global user.name 'Github Actions'
        git config --global user.email 'gh-actions@bot.noreply.github.com'
        release_branch="release/v${{ env.VERSION }}"
        git checkout -b "$release_branch"
        git push --set-upstream origin "$release_branch"

    # Step 4: Bump the version
    - name: Bump version
      id: bump_version
      run: |
        if [ -n "${{ github.event.inputs.next_release_version }}" ]; then
          echo "Skipping version bump as a version was provided."
          echo "NEXT_VERSION=${{ github.event.inputs.next_release_version }}" >> $GITHUB_ENV
        else
          version="${{ env.VERSION }}"
          year=$(date +%y)

          if [[ $version =~ ([0-9]+)\.([0-9]+)\.[0-9]+ ]]; then
            major="${BASH_REMATCH[1]}"
            minor="${BASH_REMATCH[2]}"

            # Check if the year in the version needs updating
            if [[ "$major" != "$year" ]]; then
              year=$((major + 1))
            fi

            next_version="$year.$((minor + 1)).0"
            echo "NEXT_VERSION=$next_version" >> $GITHUB_ENV
          else
            echo "No version match, exiting"
            exit 1
          fi
        fi

    # Step 5: Update the VERSION file with the new version
    - name: Update VERSION file and push new branch using GitHub CLI
      run: |
        next_version_branch="bump-version-${{ env.NEXT_VERSION }}"
        git checkout -b $next_version_branch
        echo "${{ env.NEXT_VERSION }}" > VERSION
        git add VERSION
        git commit -m "Bump version to ${{ env.NEXT_VERSION }}"
        git push --set-upstream origin $next_version_branch

  # Step 7: Create a pull request for the version bump using GitHub CLI
    - name: Create pull request using GitHub CLI
      run: |
        gh pr create --base main --head bump-version-${{ env.NEXT_VERSION }} --title "Bump version to ${{ env.NEXT_VERSION }}" --body "This PR bumps the version to ${{ env.NEXT_VERSION }}."
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
